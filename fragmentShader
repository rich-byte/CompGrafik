precision mediump float;
varying vec3 Position;
varying vec3 Normal;

uniform vec4 lightPosition;
uniform vec4 lightAmbient;
uniform vec4 lightDiffuse;
uniform vec4 lightSpecular;
uniform vec3 lightHalfVector;

uniform vec4 materialEmission;
uniform vec4 materialAmbient;
uniform vec4 materialDiffuse;
uniform vec4 materialSpecular;
uniform float materialShininess;
	
void main()
{
	vec3 N = normalize(Normal);
	vec4 ambient = materialAmbient * lightAmbient;

	vec3 L = vec3(0.0);
	vec3 H = vec3(0.0);

	if (lightPosition.w == 0.0) {
		L = normalize(vec3(lightPosition));
		H = normalize(lightHalfVector);
	} else {
		L = normalize(vec3(lightPosition) - Position);
		vec4 Pos_eye = vec4(0.0, 0.0, 1.0, 0.0);
		vec3 A = Pos_eye.xyz;
		H = normalize(L + A);
	}

	vec4 diffuse = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 specular = vec4(0.0, 0.0, 0.0, 1.0);
	float diffuseLight = max(dot(N, L), 0.0);
	if (diffuseLight > 0.0) {
		diffuse = diffuseLight * materialDiffuse * lightDiffuse;
		float specLight = pow(max(dot(H, N), 0.0), materialShininess);
		specular = specLight * materialSpecular * lightSpecular;
	}

	gl_FragColor = materialEmission + ambient + diffuse + specular;
}