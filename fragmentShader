precision mediump float;
varying vec3 fragColor;
varying vec3 Position;
varying vec3 Normal;

//uniform MaterialParams{
//	vec4 emission;
//	vec4 ambient;
//	vec4 diffuse;
//	vec4 specular;
//	float shininess;
//} Material;

//uniform LightParams{
//	vec4 position;
//	vec4 ambient;
//	vec4 diffuse;
//	vec4 specular;
//	vec3 halfVector;
//} LightSource;
	
void main()
{
	vec4 lightPosition = vec4(-1.5, 2.0, 4.0, 1.0);
	vec4 lightAmbient = vec4(0.2, 0.2, 0.2, 1.0);
	vec4 lightDiffuse = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 lightSpecular = vec4(1.0, 1.0, 1.0, 1.0);
	vec3 lightHalfVector = vec3(0.0, 0.0, 0.0, 0.0);

	vec4 materialEmission = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 materialAmbient = vec4(0.0, 1.0, 0.0, 1.0);
	vec4 materialDiffuse = vec4(0.4, 0.8, 0.4, 1.0);
	vec4 materialSpecular = vec4(0.0, 0.4, 0.4, 1.0);
  	float materialShininess = 300.0;

	vec3 N = normalize(Normal);
	vec4 ambient = materialAmbient * lightAmbient;
	vec3 L = vec3(0.0);
	vec3 H = vec3(0.0);

	if (lightPosition.w == 0.0) {
		L = normalize(vec3(lightPosition));
		H = normalize(lightHalfVector);
	} else {
		L = normalize(vec3(lightPosition) - Position);
		vec4 Pos_eye = vec4(0.0, 0.0, 1.0, 0.0);
		vec3 A = Pos_eye.xyz;
		H = normalize(L + A);
	}

	vec4 diffuse = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 specular = vec4(0.0, 0.0, 0.0, 1.0);
	float diffuseLight = pow(max(dot(H, N), 0), materialShininess);
	if (diffuseLight > 0.0) {
		diffuse = diffuseLight * materialDiffuse * lightDiffuse;
		float specLight = pow(max(dot(H, N), 0), materialShininess);
		specular = specLight * materialSpecular * lightSpecular;
	}

	gl_FragColor = materialEmission + ambient + diffuse + specular;


	// vec3 N = normalize(Normal);
	// vec4 emissive = Material.emission;
	// vec4 ambient = Material.ambient * LightSource.ambient;
	// vec3 L = vec3(0.0);
	// vec3 H = vec3(0.0);

	// if (LightSource.position.w == 0) {
	// 	L = normalize(vec3(LightSource.position));
	// 	H = normal(LightSource.halfVector);
	// } else {
	// 	L = normalize(vec3(LightSource.position) - Position);
	// 	vec4 Pos_eye = vec4(0.0, 0.0, 1.0, 0.0);
	// 	vec3 A = Pos_eye.xyz;
	// 	H = normalize(L + A);
	// }

	// vec4 diffuse = vec4(0.0, 0.0, 0.0, 1.0);
	// vec4 specular = diffuse;
	// float diffuseLight = pow(max(dor(H, N), 0), Material.shininess);
	// if (diffuseLight > 0) {
	// 	diffuse = diffuseLight * Material.diffuse * LightSource.diffuse;
	// 	float specLight = pow(max(dot(H, N), 0), Material.shininess);
	// 	specular = specLight * Material.specular * LightSource.specular;
	// }
	// gl_FragColor = emissive + ambient + diffuse + specular;
}